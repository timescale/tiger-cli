// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mocks/mock_client.go -package=mocks ClientWithResponsesInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	api "github.com/timescale/tiger-cli/internal/tiger/api"
	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// DeleteProjectsProjectIdServicesServiceId mocks base method.
func (m *MockClientInterface) DeleteProjectsProjectIdServicesServiceId(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectsProjectIdServicesServiceId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectsProjectIdServicesServiceId indicates an expected call of DeleteProjectsProjectIdServicesServiceId.
func (mr *MockClientInterfaceMockRecorder) DeleteProjectsProjectIdServicesServiceId(ctx, projectId, serviceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectsProjectIdServicesServiceId", reflect.TypeOf((*MockClientInterface)(nil).DeleteProjectsProjectIdServicesServiceId), varargs...)
}

// DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetId mocks base method.
func (m *MockClientInterface) DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetId(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetId indicates an expected call of DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetId.
func (mr *MockClientInterfaceMockRecorder) DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetId(ctx, projectId, serviceId, replicaSetId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetId", reflect.TypeOf((*MockClientInterface)(nil).DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetId), varargs...)
}

// DeleteProjectsProjectIdVpcsVpcId mocks base method.
func (m *MockClientInterface) DeleteProjectsProjectIdVpcsVpcId(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectsProjectIdVpcsVpcId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectsProjectIdVpcsVpcId indicates an expected call of DeleteProjectsProjectIdVpcsVpcId.
func (mr *MockClientInterfaceMockRecorder) DeleteProjectsProjectIdVpcsVpcId(ctx, projectId, vpcId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectsProjectIdVpcsVpcId", reflect.TypeOf((*MockClientInterface)(nil).DeleteProjectsProjectIdVpcsVpcId), varargs...)
}

// DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringId mocks base method.
func (m *MockClientInterface) DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringId(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, peeringId api.PeeringId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, peeringId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringId indicates an expected call of DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringId.
func (mr *MockClientInterfaceMockRecorder) DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringId(ctx, projectId, vpcId, peeringId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, peeringId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringId", reflect.TypeOf((*MockClientInterface)(nil).DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringId), varargs...)
}

// GetProjectsProjectIdServices mocks base method.
func (m *MockClientInterface) GetProjectsProjectIdServices(ctx context.Context, projectId api.ProjectId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdServices", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdServices indicates an expected call of GetProjectsProjectIdServices.
func (mr *MockClientInterfaceMockRecorder) GetProjectsProjectIdServices(ctx, projectId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdServices", reflect.TypeOf((*MockClientInterface)(nil).GetProjectsProjectIdServices), varargs...)
}

// GetProjectsProjectIdServicesServiceId mocks base method.
func (m *MockClientInterface) GetProjectsProjectIdServicesServiceId(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdServicesServiceId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdServicesServiceId indicates an expected call of GetProjectsProjectIdServicesServiceId.
func (mr *MockClientInterfaceMockRecorder) GetProjectsProjectIdServicesServiceId(ctx, projectId, serviceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdServicesServiceId", reflect.TypeOf((*MockClientInterface)(nil).GetProjectsProjectIdServicesServiceId), varargs...)
}

// GetProjectsProjectIdServicesServiceIdReplicaSets mocks base method.
func (m *MockClientInterface) GetProjectsProjectIdServicesServiceIdReplicaSets(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdServicesServiceIdReplicaSets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdServicesServiceIdReplicaSets indicates an expected call of GetProjectsProjectIdServicesServiceIdReplicaSets.
func (mr *MockClientInterfaceMockRecorder) GetProjectsProjectIdServicesServiceIdReplicaSets(ctx, projectId, serviceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdServicesServiceIdReplicaSets", reflect.TypeOf((*MockClientInterface)(nil).GetProjectsProjectIdServicesServiceIdReplicaSets), varargs...)
}

// GetProjectsProjectIdVpcs mocks base method.
func (m *MockClientInterface) GetProjectsProjectIdVpcs(ctx context.Context, projectId api.ProjectId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdVpcs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdVpcs indicates an expected call of GetProjectsProjectIdVpcs.
func (mr *MockClientInterfaceMockRecorder) GetProjectsProjectIdVpcs(ctx, projectId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdVpcs", reflect.TypeOf((*MockClientInterface)(nil).GetProjectsProjectIdVpcs), varargs...)
}

// GetProjectsProjectIdVpcsVpcId mocks base method.
func (m *MockClientInterface) GetProjectsProjectIdVpcsVpcId(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdVpcsVpcId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdVpcsVpcId indicates an expected call of GetProjectsProjectIdVpcsVpcId.
func (mr *MockClientInterfaceMockRecorder) GetProjectsProjectIdVpcsVpcId(ctx, projectId, vpcId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdVpcsVpcId", reflect.TypeOf((*MockClientInterface)(nil).GetProjectsProjectIdVpcsVpcId), varargs...)
}

// GetProjectsProjectIdVpcsVpcIdPeerings mocks base method.
func (m *MockClientInterface) GetProjectsProjectIdVpcsVpcIdPeerings(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdVpcsVpcIdPeerings", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdVpcsVpcIdPeerings indicates an expected call of GetProjectsProjectIdVpcsVpcIdPeerings.
func (mr *MockClientInterfaceMockRecorder) GetProjectsProjectIdVpcsVpcIdPeerings(ctx, projectId, vpcId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdVpcsVpcIdPeerings", reflect.TypeOf((*MockClientInterface)(nil).GetProjectsProjectIdVpcsVpcIdPeerings), varargs...)
}

// GetProjectsProjectIdVpcsVpcIdPeeringsPeeringId mocks base method.
func (m *MockClientInterface) GetProjectsProjectIdVpcsVpcIdPeeringsPeeringId(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, peeringId api.PeeringId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, peeringId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdVpcsVpcIdPeeringsPeeringId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdVpcsVpcIdPeeringsPeeringId indicates an expected call of GetProjectsProjectIdVpcsVpcIdPeeringsPeeringId.
func (mr *MockClientInterfaceMockRecorder) GetProjectsProjectIdVpcsVpcIdPeeringsPeeringId(ctx, projectId, vpcId, peeringId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, peeringId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdVpcsVpcIdPeeringsPeeringId", reflect.TypeOf((*MockClientInterface)(nil).GetProjectsProjectIdVpcsVpcIdPeeringsPeeringId), varargs...)
}

// PostAnalyticsIdentify mocks base method.
func (m *MockClientInterface) PostAnalyticsIdentify(ctx context.Context, body api.PostAnalyticsIdentifyJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAnalyticsIdentify", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAnalyticsIdentify indicates an expected call of PostAnalyticsIdentify.
func (mr *MockClientInterfaceMockRecorder) PostAnalyticsIdentify(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAnalyticsIdentify", reflect.TypeOf((*MockClientInterface)(nil).PostAnalyticsIdentify), varargs...)
}

// PostAnalyticsIdentifyWithBody mocks base method.
func (m *MockClientInterface) PostAnalyticsIdentifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAnalyticsIdentifyWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAnalyticsIdentifyWithBody indicates an expected call of PostAnalyticsIdentifyWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAnalyticsIdentifyWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAnalyticsIdentifyWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAnalyticsIdentifyWithBody), varargs...)
}

// PostAnalyticsTrack mocks base method.
func (m *MockClientInterface) PostAnalyticsTrack(ctx context.Context, body api.PostAnalyticsTrackJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAnalyticsTrack", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAnalyticsTrack indicates an expected call of PostAnalyticsTrack.
func (mr *MockClientInterfaceMockRecorder) PostAnalyticsTrack(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAnalyticsTrack", reflect.TypeOf((*MockClientInterface)(nil).PostAnalyticsTrack), varargs...)
}

// PostAnalyticsTrackWithBody mocks base method.
func (m *MockClientInterface) PostAnalyticsTrackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAnalyticsTrackWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAnalyticsTrackWithBody indicates an expected call of PostAnalyticsTrackWithBody.
func (mr *MockClientInterfaceMockRecorder) PostAnalyticsTrackWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAnalyticsTrackWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostAnalyticsTrackWithBody), varargs...)
}

// PostProjectsProjectIdServices mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServices(ctx context.Context, projectId api.ProjectId, body api.PostProjectsProjectIdServicesJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServices", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServices indicates an expected call of PostProjectsProjectIdServices.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServices(ctx, projectId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServices", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServices), varargs...)
}

// PostProjectsProjectIdServicesServiceIdAttachToVPC mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdAttachToVPC(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdAttachToVPCJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdAttachToVPC", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdAttachToVPC indicates an expected call of PostProjectsProjectIdServicesServiceIdAttachToVPC.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdAttachToVPC(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdAttachToVPC", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdAttachToVPC), varargs...)
}

// PostProjectsProjectIdServicesServiceIdAttachToVPCWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdAttachToVPCWithBody(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdAttachToVPCWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdAttachToVPCWithBody indicates an expected call of PostProjectsProjectIdServicesServiceIdAttachToVPCWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdAttachToVPCWithBody(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdAttachToVPCWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdAttachToVPCWithBody), varargs...)
}

// PostProjectsProjectIdServicesServiceIdDetachFromVPC mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdDetachFromVPC(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdDetachFromVPCJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdDetachFromVPC", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdDetachFromVPC indicates an expected call of PostProjectsProjectIdServicesServiceIdDetachFromVPC.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdDetachFromVPC(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdDetachFromVPC", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdDetachFromVPC), varargs...)
}

// PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBody(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBody indicates an expected call of PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBody(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBody), varargs...)
}

// PostProjectsProjectIdServicesServiceIdDisablePooler mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdDisablePooler(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdDisablePooler", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdDisablePooler indicates an expected call of PostProjectsProjectIdServicesServiceIdDisablePooler.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdDisablePooler(ctx, projectId, serviceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdDisablePooler", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdDisablePooler), varargs...)
}

// PostProjectsProjectIdServicesServiceIdEnablePooler mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdEnablePooler(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdEnablePooler", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdEnablePooler indicates an expected call of PostProjectsProjectIdServicesServiceIdEnablePooler.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdEnablePooler(ctx, projectId, serviceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdEnablePooler", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdEnablePooler), varargs...)
}

// PostProjectsProjectIdServicesServiceIdForkService mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdForkService(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdForkServiceJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdForkService", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdForkService indicates an expected call of PostProjectsProjectIdServicesServiceIdForkService.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdForkService(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdForkService", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdForkService), varargs...)
}

// PostProjectsProjectIdServicesServiceIdForkServiceWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdForkServiceWithBody(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdForkServiceWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdForkServiceWithBody indicates an expected call of PostProjectsProjectIdServicesServiceIdForkServiceWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdForkServiceWithBody(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdForkServiceWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdForkServiceWithBody), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSets mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdReplicaSets(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdReplicaSetsJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSets indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSets.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSets(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSets", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSets), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePooler mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePooler(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePooler", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePooler indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePooler.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePooler(ctx, projectId, serviceId, replicaSetId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePooler", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePooler), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePooler mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePooler(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePooler", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePooler indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePooler.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePooler(ctx, projectId, serviceId, replicaSetId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePooler", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePooler), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResize mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResize(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, body api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResize", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResize indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResize.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResize(ctx, projectId, serviceId, replicaSetId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResize", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResize), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBody(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBody indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBody(ctx, projectId, serviceId, replicaSetId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBody), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironment mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironment(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, body api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironment indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironment.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironment(ctx, projectId, serviceId, replicaSetId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironment", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironment), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBody(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBody indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBody(ctx, projectId, serviceId, replicaSetId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBody), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsWithBody(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsWithBody indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsWithBody(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsWithBody), varargs...)
}

// PostProjectsProjectIdServicesServiceIdResize mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdResize(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdResizeJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdResize", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdResize indicates an expected call of PostProjectsProjectIdServicesServiceIdResize.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdResize(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdResize", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdResize), varargs...)
}

// PostProjectsProjectIdServicesServiceIdResizeWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdResizeWithBody(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdResizeWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdResizeWithBody indicates an expected call of PostProjectsProjectIdServicesServiceIdResizeWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdResizeWithBody(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdResizeWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdResizeWithBody), varargs...)
}

// PostProjectsProjectIdServicesServiceIdSetEnvironment mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdSetEnvironment(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdSetEnvironmentJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdSetEnvironment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdSetEnvironment indicates an expected call of PostProjectsProjectIdServicesServiceIdSetEnvironment.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdSetEnvironment(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdSetEnvironment", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdSetEnvironment), varargs...)
}

// PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBody(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBody indicates an expected call of PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBody(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBody), varargs...)
}

// PostProjectsProjectIdServicesServiceIdSetHA mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdSetHA(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdSetHAJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdSetHA", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdSetHA indicates an expected call of PostProjectsProjectIdServicesServiceIdSetHA.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdSetHA(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdSetHA", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdSetHA), varargs...)
}

// PostProjectsProjectIdServicesServiceIdSetHAWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdSetHAWithBody(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdSetHAWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdSetHAWithBody indicates an expected call of PostProjectsProjectIdServicesServiceIdSetHAWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdSetHAWithBody(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdSetHAWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdSetHAWithBody), varargs...)
}

// PostProjectsProjectIdServicesServiceIdUpdatePassword mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdUpdatePassword(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdUpdatePasswordJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdUpdatePassword", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdUpdatePassword indicates an expected call of PostProjectsProjectIdServicesServiceIdUpdatePassword.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdUpdatePassword(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdUpdatePassword", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdUpdatePassword), varargs...)
}

// PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBody(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBody indicates an expected call of PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBody(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBody), varargs...)
}

// PostProjectsProjectIdServicesWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdServicesWithBody(ctx context.Context, projectId api.ProjectId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesWithBody indicates an expected call of PostProjectsProjectIdServicesWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdServicesWithBody(ctx, projectId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdServicesWithBody), varargs...)
}

// PostProjectsProjectIdVpcs mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdVpcs(ctx context.Context, projectId api.ProjectId, body api.PostProjectsProjectIdVpcsJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcs indicates an expected call of PostProjectsProjectIdVpcs.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdVpcs(ctx, projectId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcs", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdVpcs), varargs...)
}

// PostProjectsProjectIdVpcsVpcIdPeerings mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdVpcsVpcIdPeerings(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, body api.PostProjectsProjectIdVpcsVpcIdPeeringsJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsVpcIdPeerings", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsVpcIdPeerings indicates an expected call of PostProjectsProjectIdVpcsVpcIdPeerings.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdVpcsVpcIdPeerings(ctx, projectId, vpcId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsVpcIdPeerings", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdVpcsVpcIdPeerings), varargs...)
}

// PostProjectsProjectIdVpcsVpcIdPeeringsWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdVpcsVpcIdPeeringsWithBody(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsVpcIdPeeringsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsVpcIdPeeringsWithBody indicates an expected call of PostProjectsProjectIdVpcsVpcIdPeeringsWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdVpcsVpcIdPeeringsWithBody(ctx, projectId, vpcId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsVpcIdPeeringsWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdVpcsVpcIdPeeringsWithBody), varargs...)
}

// PostProjectsProjectIdVpcsVpcIdRename mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdVpcsVpcIdRename(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, body api.PostProjectsProjectIdVpcsVpcIdRenameJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsVpcIdRename", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsVpcIdRename indicates an expected call of PostProjectsProjectIdVpcsVpcIdRename.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdVpcsVpcIdRename(ctx, projectId, vpcId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsVpcIdRename", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdVpcsVpcIdRename), varargs...)
}

// PostProjectsProjectIdVpcsVpcIdRenameWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdVpcsVpcIdRenameWithBody(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsVpcIdRenameWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsVpcIdRenameWithBody indicates an expected call of PostProjectsProjectIdVpcsVpcIdRenameWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdVpcsVpcIdRenameWithBody(ctx, projectId, vpcId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsVpcIdRenameWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdVpcsVpcIdRenameWithBody), varargs...)
}

// PostProjectsProjectIdVpcsWithBody mocks base method.
func (m *MockClientInterface) PostProjectsProjectIdVpcsWithBody(ctx context.Context, projectId api.ProjectId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsWithBody indicates an expected call of PostProjectsProjectIdVpcsWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProjectsProjectIdVpcsWithBody(ctx, projectId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProjectsProjectIdVpcsWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, reqEditors ...api.RequestEditorFn) (*api.DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdWithResponse indicates an expected call of DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdWithResponse(ctx, projectId, serviceId, replicaSetId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdWithResponse), varargs...)
}

// DeleteProjectsProjectIdServicesServiceIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteProjectsProjectIdServicesServiceIdWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, reqEditors ...api.RequestEditorFn) (*api.DeleteProjectsProjectIdServicesServiceIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectsProjectIdServicesServiceIdWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteProjectsProjectIdServicesServiceIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectsProjectIdServicesServiceIdWithResponse indicates an expected call of DeleteProjectsProjectIdServicesServiceIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteProjectsProjectIdServicesServiceIdWithResponse(ctx, projectId, serviceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectsProjectIdServicesServiceIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteProjectsProjectIdServicesServiceIdWithResponse), varargs...)
}

// DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, peeringId api.PeeringId, reqEditors ...api.RequestEditorFn) (*api.DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, peeringId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse indicates an expected call of DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse(ctx, projectId, vpcId, peeringId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, peeringId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse), varargs...)
}

// DeleteProjectsProjectIdVpcsVpcIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteProjectsProjectIdVpcsVpcIdWithResponse(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, reqEditors ...api.RequestEditorFn) (*api.DeleteProjectsProjectIdVpcsVpcIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectsProjectIdVpcsVpcIdWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteProjectsProjectIdVpcsVpcIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectsProjectIdVpcsVpcIdWithResponse indicates an expected call of DeleteProjectsProjectIdVpcsVpcIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteProjectsProjectIdVpcsVpcIdWithResponse(ctx, projectId, vpcId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectsProjectIdVpcsVpcIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteProjectsProjectIdVpcsVpcIdWithResponse), varargs...)
}

// GetProjectsProjectIdServicesServiceIdReplicaSetsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProjectsProjectIdServicesServiceIdReplicaSetsWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, reqEditors ...api.RequestEditorFn) (*api.GetProjectsProjectIdServicesServiceIdReplicaSetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdServicesServiceIdReplicaSetsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetProjectsProjectIdServicesServiceIdReplicaSetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdServicesServiceIdReplicaSetsWithResponse indicates an expected call of GetProjectsProjectIdServicesServiceIdReplicaSetsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProjectsProjectIdServicesServiceIdReplicaSetsWithResponse(ctx, projectId, serviceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdServicesServiceIdReplicaSetsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProjectsProjectIdServicesServiceIdReplicaSetsWithResponse), varargs...)
}

// GetProjectsProjectIdServicesServiceIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProjectsProjectIdServicesServiceIdWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, reqEditors ...api.RequestEditorFn) (*api.GetProjectsProjectIdServicesServiceIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdServicesServiceIdWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetProjectsProjectIdServicesServiceIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdServicesServiceIdWithResponse indicates an expected call of GetProjectsProjectIdServicesServiceIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProjectsProjectIdServicesServiceIdWithResponse(ctx, projectId, serviceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdServicesServiceIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProjectsProjectIdServicesServiceIdWithResponse), varargs...)
}

// GetProjectsProjectIdServicesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProjectsProjectIdServicesWithResponse(ctx context.Context, projectId api.ProjectId, reqEditors ...api.RequestEditorFn) (*api.GetProjectsProjectIdServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdServicesWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetProjectsProjectIdServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdServicesWithResponse indicates an expected call of GetProjectsProjectIdServicesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProjectsProjectIdServicesWithResponse(ctx, projectId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdServicesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProjectsProjectIdServicesWithResponse), varargs...)
}

// GetProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, peeringId api.PeeringId, reqEditors ...api.RequestEditorFn) (*api.GetProjectsProjectIdVpcsVpcIdPeeringsPeeringIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, peeringId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetProjectsProjectIdVpcsVpcIdPeeringsPeeringIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse indicates an expected call of GetProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse(ctx, projectId, vpcId, peeringId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, peeringId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProjectsProjectIdVpcsVpcIdPeeringsPeeringIdWithResponse), varargs...)
}

// GetProjectsProjectIdVpcsVpcIdPeeringsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProjectsProjectIdVpcsVpcIdPeeringsWithResponse(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, reqEditors ...api.RequestEditorFn) (*api.GetProjectsProjectIdVpcsVpcIdPeeringsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdVpcsVpcIdPeeringsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetProjectsProjectIdVpcsVpcIdPeeringsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdVpcsVpcIdPeeringsWithResponse indicates an expected call of GetProjectsProjectIdVpcsVpcIdPeeringsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProjectsProjectIdVpcsVpcIdPeeringsWithResponse(ctx, projectId, vpcId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdVpcsVpcIdPeeringsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProjectsProjectIdVpcsVpcIdPeeringsWithResponse), varargs...)
}

// GetProjectsProjectIdVpcsVpcIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProjectsProjectIdVpcsVpcIdWithResponse(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, reqEditors ...api.RequestEditorFn) (*api.GetProjectsProjectIdVpcsVpcIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdVpcsVpcIdWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetProjectsProjectIdVpcsVpcIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdVpcsVpcIdWithResponse indicates an expected call of GetProjectsProjectIdVpcsVpcIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProjectsProjectIdVpcsVpcIdWithResponse(ctx, projectId, vpcId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdVpcsVpcIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProjectsProjectIdVpcsVpcIdWithResponse), varargs...)
}

// GetProjectsProjectIdVpcsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetProjectsProjectIdVpcsWithResponse(ctx context.Context, projectId api.ProjectId, reqEditors ...api.RequestEditorFn) (*api.GetProjectsProjectIdVpcsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectsProjectIdVpcsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetProjectsProjectIdVpcsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsProjectIdVpcsWithResponse indicates an expected call of GetProjectsProjectIdVpcsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetProjectsProjectIdVpcsWithResponse(ctx, projectId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsProjectIdVpcsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetProjectsProjectIdVpcsWithResponse), varargs...)
}

// PostAnalyticsIdentifyWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostAnalyticsIdentifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostAnalyticsIdentifyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAnalyticsIdentifyWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostAnalyticsIdentifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAnalyticsIdentifyWithBodyWithResponse indicates an expected call of PostAnalyticsIdentifyWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostAnalyticsIdentifyWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAnalyticsIdentifyWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostAnalyticsIdentifyWithBodyWithResponse), varargs...)
}

// PostAnalyticsIdentifyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostAnalyticsIdentifyWithResponse(ctx context.Context, body api.PostAnalyticsIdentifyJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostAnalyticsIdentifyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAnalyticsIdentifyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostAnalyticsIdentifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAnalyticsIdentifyWithResponse indicates an expected call of PostAnalyticsIdentifyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostAnalyticsIdentifyWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAnalyticsIdentifyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostAnalyticsIdentifyWithResponse), varargs...)
}

// PostAnalyticsTrackWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostAnalyticsTrackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostAnalyticsTrackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAnalyticsTrackWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostAnalyticsTrackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAnalyticsTrackWithBodyWithResponse indicates an expected call of PostAnalyticsTrackWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostAnalyticsTrackWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAnalyticsTrackWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostAnalyticsTrackWithBodyWithResponse), varargs...)
}

// PostAnalyticsTrackWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostAnalyticsTrackWithResponse(ctx context.Context, body api.PostAnalyticsTrackJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostAnalyticsTrackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostAnalyticsTrackWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostAnalyticsTrackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostAnalyticsTrackWithResponse indicates an expected call of PostAnalyticsTrackWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostAnalyticsTrackWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAnalyticsTrackWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostAnalyticsTrackWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdAttachToVPCWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdAttachToVPCWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdAttachToVPCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdAttachToVPCWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdAttachToVPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdAttachToVPCWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdAttachToVPCWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdAttachToVPCWithBodyWithResponse(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdAttachToVPCWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdAttachToVPCWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdAttachToVPCWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdAttachToVPCWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdAttachToVPCJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdAttachToVPCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdAttachToVPCWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdAttachToVPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdAttachToVPCWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdAttachToVPCWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdAttachToVPCWithResponse(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdAttachToVPCWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdAttachToVPCWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdDetachFromVPCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdDetachFromVPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBodyWithResponse(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdDetachFromVPCWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdDetachFromVPCWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdDetachFromVPCWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdDetachFromVPCJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdDetachFromVPCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdDetachFromVPCWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdDetachFromVPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdDetachFromVPCWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdDetachFromVPCWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdDetachFromVPCWithResponse(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdDetachFromVPCWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdDetachFromVPCWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdDisablePoolerWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdDisablePoolerWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdDisablePoolerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdDisablePoolerWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdDisablePoolerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdDisablePoolerWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdDisablePoolerWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdDisablePoolerWithResponse(ctx, projectId, serviceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdDisablePoolerWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdDisablePoolerWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdEnablePoolerWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdEnablePoolerWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdEnablePoolerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdEnablePoolerWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdEnablePoolerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdEnablePoolerWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdEnablePoolerWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdEnablePoolerWithResponse(ctx, projectId, serviceId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdEnablePoolerWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdEnablePoolerWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdForkServiceWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdForkServiceWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdForkServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdForkServiceWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdForkServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdForkServiceWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdForkServiceWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdForkServiceWithBodyWithResponse(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdForkServiceWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdForkServiceWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdForkServiceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdForkServiceWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdForkServiceJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdForkServiceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdForkServiceWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdForkServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdForkServiceWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdForkServiceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdForkServiceWithResponse(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdForkServiceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdForkServiceWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePoolerWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePoolerWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePoolerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePoolerWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePoolerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePoolerWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePoolerWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePoolerWithResponse(ctx, projectId, serviceId, replicaSetId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePoolerWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdDisablePoolerWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePoolerWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePoolerWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePoolerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePoolerWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePoolerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePoolerWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePoolerWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePoolerWithResponse(ctx, projectId, serviceId, replicaSetId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePoolerWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdEnablePoolerWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBodyWithResponse(ctx, projectId, serviceId, replicaSetId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, body api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithResponse(ctx, projectId, serviceId, replicaSetId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdResizeWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBodyWithResponse(ctx, projectId, serviceId, replicaSetId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, replicaSetId api.ReplicaSetId, body api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, replicaSetId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithResponse(ctx, projectId, serviceId, replicaSetId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, replicaSetId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsReplicaSetIdSetEnvironmentWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdReplicaSetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdReplicaSetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsWithBodyWithResponse(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdReplicaSetsWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdReplicaSetsJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdReplicaSetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdReplicaSetsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdReplicaSetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdReplicaSetsWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdReplicaSetsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdReplicaSetsWithResponse(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdReplicaSetsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdReplicaSetsWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdResizeWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdResizeWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdResizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdResizeWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdResizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdResizeWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdResizeWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdResizeWithBodyWithResponse(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdResizeWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdResizeWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdResizeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdResizeWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdResizeJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdResizeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdResizeWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdResizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdResizeWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdResizeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdResizeWithResponse(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdResizeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdResizeWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdSetEnvironmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdSetEnvironmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBodyWithResponse(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdSetEnvironmentWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdSetEnvironmentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdSetEnvironmentWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdSetEnvironmentJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdSetEnvironmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdSetEnvironmentWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdSetEnvironmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdSetEnvironmentWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdSetEnvironmentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdSetEnvironmentWithResponse(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdSetEnvironmentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdSetEnvironmentWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdSetHAWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdSetHAWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdSetHAResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdSetHAWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdSetHAResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdSetHAWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdSetHAWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdSetHAWithBodyWithResponse(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdSetHAWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdSetHAWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdSetHAWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdSetHAWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdSetHAJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdSetHAResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdSetHAWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdSetHAResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdSetHAWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdSetHAWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdSetHAWithResponse(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdSetHAWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdSetHAWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdUpdatePasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdUpdatePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBodyWithResponse(ctx, projectId, serviceId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdUpdatePasswordWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesServiceIdUpdatePasswordWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesServiceIdUpdatePasswordWithResponse(ctx context.Context, projectId api.ProjectId, serviceId api.ServiceId, body api.PostProjectsProjectIdServicesServiceIdUpdatePasswordJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesServiceIdUpdatePasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, serviceId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesServiceIdUpdatePasswordWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesServiceIdUpdatePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesServiceIdUpdatePasswordWithResponse indicates an expected call of PostProjectsProjectIdServicesServiceIdUpdatePasswordWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesServiceIdUpdatePasswordWithResponse(ctx, projectId, serviceId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, serviceId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesServiceIdUpdatePasswordWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesServiceIdUpdatePasswordWithResponse), varargs...)
}

// PostProjectsProjectIdServicesWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesWithBodyWithResponse indicates an expected call of PostProjectsProjectIdServicesWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesWithBodyWithResponse(ctx, projectId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdServicesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdServicesWithResponse(ctx context.Context, projectId api.ProjectId, body api.PostProjectsProjectIdServicesJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdServicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdServicesWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdServicesWithResponse indicates an expected call of PostProjectsProjectIdServicesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdServicesWithResponse(ctx, projectId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdServicesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdServicesWithResponse), varargs...)
}

// PostProjectsProjectIdVpcsVpcIdPeeringsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdVpcsVpcIdPeeringsWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdVpcsVpcIdPeeringsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsVpcIdPeeringsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdVpcsVpcIdPeeringsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsVpcIdPeeringsWithBodyWithResponse indicates an expected call of PostProjectsProjectIdVpcsVpcIdPeeringsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdVpcsVpcIdPeeringsWithBodyWithResponse(ctx, projectId, vpcId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsVpcIdPeeringsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdVpcsVpcIdPeeringsWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdVpcsVpcIdPeeringsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdVpcsVpcIdPeeringsWithResponse(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, body api.PostProjectsProjectIdVpcsVpcIdPeeringsJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdVpcsVpcIdPeeringsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsVpcIdPeeringsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdVpcsVpcIdPeeringsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsVpcIdPeeringsWithResponse indicates an expected call of PostProjectsProjectIdVpcsVpcIdPeeringsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdVpcsVpcIdPeeringsWithResponse(ctx, projectId, vpcId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsVpcIdPeeringsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdVpcsVpcIdPeeringsWithResponse), varargs...)
}

// PostProjectsProjectIdVpcsVpcIdRenameWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdVpcsVpcIdRenameWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdVpcsVpcIdRenameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsVpcIdRenameWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdVpcsVpcIdRenameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsVpcIdRenameWithBodyWithResponse indicates an expected call of PostProjectsProjectIdVpcsVpcIdRenameWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdVpcsVpcIdRenameWithBodyWithResponse(ctx, projectId, vpcId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsVpcIdRenameWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdVpcsVpcIdRenameWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdVpcsVpcIdRenameWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdVpcsVpcIdRenameWithResponse(ctx context.Context, projectId api.ProjectId, vpcId api.VPCId, body api.PostProjectsProjectIdVpcsVpcIdRenameJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdVpcsVpcIdRenameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, vpcId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsVpcIdRenameWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdVpcsVpcIdRenameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsVpcIdRenameWithResponse indicates an expected call of PostProjectsProjectIdVpcsVpcIdRenameWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdVpcsVpcIdRenameWithResponse(ctx, projectId, vpcId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, vpcId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsVpcIdRenameWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdVpcsVpcIdRenameWithResponse), varargs...)
}

// PostProjectsProjectIdVpcsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdVpcsWithBodyWithResponse(ctx context.Context, projectId api.ProjectId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdVpcsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdVpcsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsWithBodyWithResponse indicates an expected call of PostProjectsProjectIdVpcsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdVpcsWithBodyWithResponse(ctx, projectId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdVpcsWithBodyWithResponse), varargs...)
}

// PostProjectsProjectIdVpcsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProjectsProjectIdVpcsWithResponse(ctx context.Context, projectId api.ProjectId, body api.PostProjectsProjectIdVpcsJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.PostProjectsProjectIdVpcsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, projectId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProjectsProjectIdVpcsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.PostProjectsProjectIdVpcsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProjectsProjectIdVpcsWithResponse indicates an expected call of PostProjectsProjectIdVpcsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProjectsProjectIdVpcsWithResponse(ctx, projectId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, projectId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProjectsProjectIdVpcsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProjectsProjectIdVpcsWithResponse), varargs...)
}
